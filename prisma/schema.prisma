generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String            @id @default(cuid())
  name                 String?
  email                String            @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  password             String
  role                 String            @default("user")
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  favorites            Favorite[]
  subscriptionActive   Boolean           @default(false)
  subscriptionExpires  DateTime?
  subscriptionOrders   SubscriptionOrder[]

  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model News {
  id          String    @id @default(cuid())
  title       String
  summary     String    @db.Text
  imageUrl    String
  publishedAt DateTime  @default(now())
  author      String
  sourceUrl   String
  source      String
  category    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  favorites   Favorite[]

  @@index([category])
  @@index([author])
  @@index([createdAt])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  newsId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@unique([userId, newsId])
  @@index([userId])
  @@index([newsId])
}

model SubscriptionOrder {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount           Float
  status           String   @default("pending")
  subscriptionType String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
}